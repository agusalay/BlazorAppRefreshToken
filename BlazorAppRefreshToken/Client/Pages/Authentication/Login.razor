@page "/login"

@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

    <div class="container">
        <div class="row">
            <div class="col-md-4 offset-md-4">

                <h1 class="h2 font-weight-normal login-title">
                    Login
                </h1>

                <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginRequest">
                    <DataAnnotationsValidator />

                    <label for="inputUsername" class="sr-only">User Name</label>
                    <InputText id="inputUsername" class="form-control" @bind-Value="loginRequest.UserName" autofocus placeholder="Username" />
                    <ValidationMessage For="@(() => loginRequest.UserName)" />

                    <label for="inputPassword" class="sr-only">Password</label>
                    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="loginRequest.Password" />
                    <ValidationMessage For="@(() => loginRequest.Password)" />

                    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>

                    <label class="text-danger">@error</label>

                    <NavLink href="register">
                        <h6 class="font-weight-normal text-center">Create account</h6>
                    </NavLink>
                </EditForm>

            </div>
        </div>
    </div>

    @code{
        LoginRequest loginRequest { get; set; } = new LoginRequest();
        string error { get; set; }

        async Task OnSubmit()
        {
            error = null;
            try
            {
                var result = await authStateProvider.Login(loginRequest);

                if (result.IsAuthSuccessful)
                    navigationManager.NavigateTo("");
                else
                {
                    error = result.ErrorMessage;
                }

                
            }
            catch (Exception ex)
            {
                error = ex.Message;
            }
        }
    }
